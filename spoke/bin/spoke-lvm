#!/usr/bin/env python
"""Command line interface to Spoke LVM API."""

# core modules
import sys
from optparse import OptionParser, OptionGroup

# own modules
import spoke.lib.error as error
import spoke.lib.config as config
import spoke.lib.logger as logger
import spoke.lib.common as common

version = common.version

default_config_file = '/usr/local/pkg/spoke/etc/spoke.conf'

def main():
    usage = """Usage: %prog [options] -L [args]

Manage logical volumes

Arguments:
    VG_NAME     logical volume group name (e.g. vg01)
    LV_NAME     logical volume name (e.g. vol01)
    LV_SIZE     logical volume size in GB (e.g. 20)

Examples:
    spoke-lvm --help
    spoke-lvm -v -LS
    spoke-lvm -L --search vg01 vol01
    spoke-lvm -L --create vg01 vol01 20
    spoke-lvm -L -D vg01 vol01
"""

    parser = OptionParser(usage, version=version)
    group = OptionGroup(parser, "Common Options")
    group.add_option('-v', '--verbose', action='store_true', 
                          dest='verbose', help="verbose console logging")
    group.add_option('-q', '--quiet', action='store_true', 
                          dest='quiet', help="no console logging")
    group.add_option('-f', '--force', action='store_true',
                          dest='force', help="don't prompt for confirmation")
    group.add_option('-c', '--config', action='store', dest='config_file', 
                     metavar='CONF', default=default_config_file,
                     help="config file, [default: %default]")
    group.add_option('-S', '--search', action='store_true',
                          dest='search', help="search for a logical volume (object)")
    group.add_option('-C', '--create', action='store_true',
                          dest='create', help="create a logical volume (object)")
    group.add_option('-D', '--delete', action='store_true',
                          dest='delete', help="delete a logical volume (object)")
    parser.add_option_group(group)
        
    group = OptionGroup(parser, "LVM Options", "Usage: spoke-lvm -L [options] VG_NAME [LV_NAME] [LV_SIZE]")
    parser.add_option_group(group)
    group.add_option('-L', '--lvm', action='store_true',
                          dest='lvm', help="perform a logical volume action")
    (options, args) = parser.parse_args()

    try:
        conf = config.setup(options.config_file)
    except error.ConfigError, e:
        print e.msg
        raise e

    log = logger.setup('main', verbose=options.verbose, quiet=options.quiet)

    if len(args) < 1:
        parser.error("Missing volume group name")
    elif options.search:
        if len(args) < 2:
            (vg_name, lv_name) = (args[0], None)
        else:
            (vg_name, lv_name) = (args[0], args[1])
    elif options.create:
        if len(args) != 3:
            parser.error("Please specify a volume group, name and size in GB")
        (vg_name, lv_name, lv_size) = args
    elif options.delete:
        if len(args) != 2:
            parser.error("Please specify a volume group and name")
        (vg_name, lv_name) = args
         
    try:
        if options.lvm:
            from spoke.lib.lvm import SpokeLVM
            lv = SpokeLVM(vg_name)                
            if options.search:
                result = lv.get(lv_name)
            elif options.create:
                result = lv.create(lv_name, lv_size)
            elif options.delete:
                while options.force is not True:
                    options.force = raw_input("Are you sure you want to delete '%s': " % lv_name)
                    if options.force == 'n' or options.force == 'no':
                        sys.exit(1)
                    elif options.force == 'y' or options.force == 'yes':
                        options.force = True
                result = lv.delete(lv_name)
        else:
            parser.error("Unknown action: please specify -L")
        log.info(result['msg'])
        if (options.search and result['count'] > 0) or options.create:
            log.info(result['data'])
    except error.SpokeError, e:
        log.error(e.msg)
        if e.traceback:
            log.debug(e.traceback)
        raise e
                  
if __name__ == '__main__':
    try:
        main()
    except error.ConfigError, e:
        print e.msg
        sys.exit(e.exit_code)
    except error.SpokeError, e:
        sys.exit(e.exit_code)
    except Exception, e:
        print '''Sorry, something went wrong, you shouldn't be seeing this:'''
        print e
