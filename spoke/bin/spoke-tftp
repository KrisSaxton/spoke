#!/usr/bin/env python
"""Command line interface to Spoke TFTP API.
"""
# core modules
import sys
from optparse import OptionParser, OptionGroup

# own modules
import spoke.lib.error as error
import spoke.lib.config as config
import spoke.lib.log as logger
import spoke.lib.common as common

version = common.version

default_config_file = '/usr/local/pkg/spoke/etc/spoke.conf'

def main():
    usage = """Usage: %prog [options] -T [args]

Manage TFTP server configs to control PXE boot behaviour

Arguments:        
    MAC         MAC address (e.g. 11:22:33:44:55:66)
    FILENAME    filename of an existing pxe config
                file in the pxelinux.cfg directory
    RUN_ID      The run id that is passed in to the
                pxelinux config to identify install
                jobs (optional)

Examples:
    spoke-tftp --help
    spoke-tftp -v -S
    spoke-tftp -q -S 11:22:33:44:55:66
    spoke-tftp -c /etc/spoke/spoke.conf -S xendomu.conf
    spoke-tftp -C 11:22:33:44:55:66 xendomu.conf 5874
    spoke-tftp --delete 11:22:33:44:55:66"""
                
    parser = OptionParser(usage, version=version)
    group = OptionGroup(parser, "Common Options")
    group.add_option('--trace', action='store_true',
                          dest='trace', help="debug console logging")
    group.add_option('-v', '--verbose', action='store_true', 
                          dest='verbose', help="verbose console logging")
    group.add_option('-q', '--quiet', action='store_true', 
                          dest='quiet', help="no console logging")
    group.add_option('-f', '--force', action='store_true',
                          dest='force', help="don't prompt for confirmation")
    group.add_option('-c', '--config', action='store', dest='config_file', 
                     metavar='CONF', default=default_config_file,
                     help="config file, [default: %default]")
    group.add_option('-S', '--search', action='store_true',
                          dest='search', help="search for an object")
    group.add_option('-C', '--create', action='store_true',
                          dest='create', help="create an object")
    group.add_option('-D', '--delete', action='store_true',
                          dest='delete', help="delete an object")
    parser.add_option_group(group)

    group = OptionGroup(parser, "TFTP Options",
        "Usage: spoke-tftp -T [OPTIONS] [MAC] [FILENAME] [RUN_ID]")
    parser.add_option_group(group)
    group.add_option('-T', '--tftp', action='store_true',
                          dest='tftp', help="perform an action on a tftp object")
        
    (options, args) = parser.parse_args()

    # Setup config
    try:
        conf = config.setup(options.config_file)
    except error.ConfigError, e:
        print e.msg
        raise e

    # Setup logging
    log_file = conf.get('LOGGING', 'log_filename', '/tmp/spoke.log')
    log_level = conf.get('LOGGING', 'log_level', 'info')
    if options.trace:
        log_level = 'debug'
    size = 1024*1024*5 # 5MBytes
    max_size = conf.get('LOGGING', 'log_max_size', size) 
    retain = conf.get('LOGGING', 'log_keep', 5) 
    log = logger.log_to_file(level=log_level, log_file=log_file,
                             max_size=max_size, retain=retain,
                             trace=options.trace)
        
    if options.verbose:
        log_level = 'debug'
    if options.quiet:
        log_level = 'critical'
    log = logger.log_to_console(level=log_level, trace=options.trace)

    if options.search:
        if len(args) == 0:
            mac = None
            filename = None
        elif len(args) >= 2:
            parser.error("Please specify nothing, mac or target (not mac and target).")
            (mac, filename) = args
        # Is this is a mac or a filename?
        else:
            thing = args[0]
            try:
                mac = common.validate_mac(thing)
                filename = None
            except error.InputError:
                filename = thing
                mac = None
    if options.create:
        if len(args) < 2:
            parser.error("Please specify atleast a mac address and a tftp config file")
        if len(args) == 2:
            (mac, filename) = args
            run_id=None
        elif len(args) == 3:
            (mac, filename, run_id) = args
    elif options.delete:
        if len(args) != 1:
            parser.error("Please specify a mac address")
        mac = args[0]
    
    if options.tftp:
        try:
            tftproot = conf.get("TFTP", "tftp_root")
            from spoke.lib.tftp import SpokeTFTP
            tftp = SpokeTFTP(tftproot)  
            if options.search:
                if filename is None and mac is not None:
                    result = tftp.search(mac, filename)
                elif mac is None and filename is not None:
                    result = tftp.search(mac, filename)
                else:
                    result = tftp.search(mac, filename)
            elif options.create:
                if mac is None or mac == "":
                    msg = "Must specify MAC with create."
                    raise error.InputError, msg
                if filename is None or filename == "":
                    msg = "Must specify FILENAME with create"
                    raise error.InputError, msg                                    
                if run_id is None or run_id == "": 
                    result = tftp.create(mac, filename)
                else:
                    result = tftp.create(mac, filename, run_id) 
            elif options.delete:
                if mac is None or mac == "":
                    msg = "Must specify MAC with delete."
                    raise error.InputError, msg                              
                result = tftp.delete(mac)
            else:
                parser.error("Unknown action")
            log.info(result['msg'])
            if (options.search and result['count'] > 0) or options.create:
                log.info(result['data'])
        except error.SpokeError, e:
            log.error(e.msg)
            if e.traceback:
                log.debug(e.traceback)
            raise e
    else:
            parser.error("Unknown action: please specify one of -T")
        
if __name__ == '__main__':
    try:
        main()
    except error.ConfigError, e:
        print e.msg
        sys.exit(e.exit_code)
    except error.SpokeError, e:
        sys.exit(e.exit_code)
    except Exception, e:
        print '''Sorry, something went wrong, you shouldn't be seeing this:'''
        print e
